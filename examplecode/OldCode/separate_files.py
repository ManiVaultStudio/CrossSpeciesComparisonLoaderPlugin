# -*- coding: utf-8 -*-
"""separate files.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xGm6QWozSYF5nEv9LUZCmTegOiqaDDE2
"""

import pandas as pd

df=pd.read_csv("filteredDistances.csv")
del df['cluster_2']
del df['cross_species_cluster2_species_2']
del df['subclass_2']
del df['class_2']
df.rename(columns={'cluster_1': 'in_species_cluster', 'cross_species_cluster1_species_1': 'cross_species_cluster','subclass_1': 'subclass','class_1': 'class'}, inplace=True)
# Define a mapping dictionary
mapping_dict = {'chimp': 'Chimpanzee', 'gorilla': 'Gorilla', 'human': 'Human', 'marmoset': 'Marmoset', 'rhesus': 'Rhesus'}

# Use the replace function
df['species_1'] = df['species_1'].replace(mapping_dict)
df['species_2'] = df['species_2'].replace(mapping_dict)
df.sort_values(by=['in_species_cluster','species_1', 'species_2'])
unique_values_list = df['in_species_cluster'].unique().tolist()
result_dict = df.set_index(['species_1', 'species_2', 'in_species_cluster'])['dist'].to_dict()
cluster_cros_species_dict = df.set_index('in_species_cluster')['cross_species_cluster'].to_dict()
cluster_subclass_dict = df.set_index('in_species_cluster')['subclass'].to_dict()
cluster_neighborhood_dict = df.set_index('in_species_cluster')['neighborhood'].to_dict()
cluster_class_dict = df.set_index('in_species_cluster')['class'].to_dict()

import pandas as pd
import glob
import os
# Create a list of unique species
species = ['Chimpanzee', 'Gorilla', 'Human', 'Marmoset', 'Rhesus']
for cluster in unique_values_list:
    filtered_data = {key: value for key, value in result_dict.items() if key[2] == cluster}
    dfNew = pd.DataFrame(index=species, columns=species)
    for key, value in filtered_data.items():
        dfNew.loc[key[0], key[1]] = value
    dfNew = dfNew.fillna(0)
    dfNew.index = dfNew.index.map(lambda x: str(x).title())
    dfNew.columns = dfNew.columns.map(lambda x: str(x).title())
    clusterTemp=cluster
    clusterTemp = clusterTemp.replace("/", "-")
    dfNew['index'] = dfNew.index
    dfNew = dfNew[[col for col in dfNew.columns if col != 'index'] + ['index']]
    dfNew.to_csv("ClusterDistances/Distances+" + clusterTemp + ".csv", index=False)

#[os.remove(file) for file in glob.glob('Delete/*.csv')]

